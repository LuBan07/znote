(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{453:function(s,t,a){"use strict";a.r(t);var e=a(2),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("Boxx"),s._v(" "),a("p",[s._v("找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有：ps、top、printf、jstack、grep。")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#排查步骤"}},[s._v("排查步骤")])]),a("li",[a("a",{attrs:{href:"#其他问题排查"}},[s._v("其他问题排查")])]),a("li",[a("a",{attrs:{href:"#相关脚本"}},[s._v("相关脚本")])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"排查步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排查步骤"}},[s._v("#")]),s._v(" 排查步骤")]),s._v(" "),a("p",[a("strong",[s._v("第一步：")]),s._v(" 先找出Java进程ID，服务器上的Java应用名称为 wordcount.jar：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@storm-master home"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ef "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" wordcount\nroot    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2860")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2547")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" 02:09 pts/0  00:02:03 java -jar wordcount.jar /home/input "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("得到进程ID为 2860 。")]),s._v(" "),a("p",[a("strong",[s._v("第二步：")]),s._v(" 找出该进程内最耗费CPU的线程，可以使用如下3个命令，这里我们使用第3个命令得出如下结果：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("ps -Lfp pid ： 即 ps -Lfp 2860")])]),s._v(" "),a("li",[a("p",[s._v("ps -mp pid -o THREAD, tid, time ：即 ps -mp 2860 -o THREAD,tid,time")])]),s._v(" "),a("li",[a("p",[s._v("top -Hp pid： 即 "),a("strong",[s._v("top -Hp 2860")])])])]),s._v(" "),a("p",[s._v("这里用第三个命令："),a("code",[s._v("top -Hp 2860")])]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" -Hp "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2860")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("输出如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/znote/img/backend/ThreadTopCpuList.png",alt:"img"}})]),s._v(" "),a("p",[s._v("TIME列就是各个Java线程耗费的CPU时间，显然CPU时间最长的是ID为2968的线程，用")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%x'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2968")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("得到2968的十六进制值为b98，下面会用到。")]),s._v(" "),a("p",[a("strong",[s._v("第三步：")]),s._v(" 终于轮到jstack上场了，它用来输出进程2860的堆栈信息，然后根据线程ID的十六进制值grep，如下：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@storm-master home"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" jstack "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2860")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" b98 \n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SessionTracker"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("prio")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("tid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0x00007f55a44e4800 "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("nid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0xb53 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" Object.wait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("0x00007f558e06c000 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("可以看到CPU消耗在SessionTracker这个类的Object.wait()，于是就能很容易的定位到相关的代码了。")]),s._v(" "),a("p",[s._v("当然，可以 "),a("code",[s._v("jstack -l pid > /tmp/thread.txt")]),s._v(" 导出的文件中搜索，就可以定位到具体的线程，类。")]),s._v(" "),a("h2",{attrs:{id:"其他问题排查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他问题排查"}},[s._v("#")]),s._v(" 其他问题排查")]),s._v(" "),a("p",[a("strong",[s._v("查看某进程及某线程占用 CPU 的例子")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("jps")]),s._v(": 列出 java 进程,找到 pid.")]),s._v(" "),a("li",[a("code",[s._v("pidstat -p pid -u 1 3 -u -t")]),s._v(": 查看 pid 的进程所有线程的 cpu 使用情况.")]),s._v(" "),a("li",[a("code",[s._v("jstack -l pid > /tmp/thread.txt")]),s._v(": 导出指定 Java 应用的所有线程.")])]),s._v(" "),a("p",[s._v("然后查看 "),a("code",[s._v("nid=xxx")]),s._v("(即第二步里线程号的线程),即可定位到某段代码.")]),s._v(" "),a("p",[a("strong",[s._v("查看某进程及某线程占用 IO 的例子")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("jps")]),s._v(": 列出 java 进程,找到 pid.")]),s._v(" "),a("li",[a("code",[s._v("pidstat -p pid -u 1 3 -d -t")]),s._v(": 查看 pid 的进程所有线程的 IO 使用情况.")]),s._v(" "),a("li",[a("code",[s._v("jstack -l pid > /tmp/thread.txt")]),s._v(": 导出指定 Java 应用的所有线程.")])]),s._v(" "),a("p",[s._v("然后查看 "),a("code",[s._v("nid=xxx")]),s._v("(即第二步里线程号的线程),即可定位到某段代码.")]),s._v(" "),a("h2",{attrs:{id:"相关脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关脚本"}},[s._v("#")]),s._v(" 相关脚本")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("阿里开源的 Arthas")])]),s._v(" "),a("li",[a("p",[s._v("看了下有位大神提个 "),a("a",{attrs:{href:"https://github.com/emacsist/emacsist.github.io/issues/2",target:"_blank",rel:"noopener noreferrer"}},[s._v("issue"),a("OutboundLink")],1),s._v(" , 推荐了个自动化脚本, 亲测更好用点. 这样子就可以免去上面的一步一步地查找和计算了.\n所以, 这里也直接引用这个工具, 有需要的可以用下."),a("br"),s._v(" "),a("a",{attrs:{href:"https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#beer-show-busy-java-threads",target:"_blank",rel:"noopener noreferrer"}},[s._v("show-busy-java-threads"),a("OutboundLink")],1)])])])],1)}),[],!1,null,null,null);t.default=r.exports}}]);